{"mutant_trials": [{"mutant": {"mutator_name": "FuncCall", "lineno": 72, "col_offset": 4, "end_lineno": 72, "end_col_offset": 14, "text": "None", "source_folder": "src", "source_file": "src/pytest_sort/diffcov.py", "unified_diff": "--- src/pytest_sort/diffcov.py\n+++ [Mutant] src/pytest_sort/diffcov.py:72\n@@ -69,7 +69,7 @@\n     Return flattened data as (resolved_path, nodeid, when, line).\n     \"\"\"\n     cov = CoverageData()\n-    cov.read()\n+    None\n     for path in cov.measured_files():\n         rpath = Path(path).resolve()\n         for line, tests in cov.contexts_by_lineno(path).items():\n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 1.3779520988464355}, {"mutant": {"mutator_name": "Number", "lineno": 37, "col_offset": 56, "end_lineno": 37, "end_col_offset": 57, "text": "-1", "source_folder": "src", "source_file": "src/pytest_sort/database.py", "unified_diff": "--- src/pytest_sort/database.py\n+++ [Mutant] src/pytest_sort/database.py:37\n@@ -34,7 +34,7 @@\n     for nodeid, recorded_node in recorded_times.items():\n         node_data = _sort_data.get(nodeid, {})\n \n-        node_data[\"setup\"] = max(node_data.get(\"setup\", 0), recorded_node.get(\"setup\", 0))\n+        node_data[\"setup\"] = max(node_data.get(\"setup\", -1), recorded_node.get(\"setup\", 0))\n         node_data[\"call\"] = max(node_data.get(\"call\", 0), recorded_node.get(\"call\", 0))\n         node_data[\"teardown\"] = max(node_data.get(\"teardown\", 0), recorded_node.get(\"teardown\", 0))\n \n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 0.9126441478729248}, {"mutant": {"mutator_name": "Number", "lineno": 37, "col_offset": 87, "end_lineno": 37, "end_col_offset": 88, "text": "-1", "source_folder": "src", "source_file": "src/pytest_sort/database.py", "unified_diff": "--- src/pytest_sort/database.py\n+++ [Mutant] src/pytest_sort/database.py:37\n@@ -34,7 +34,7 @@\n     for nodeid, recorded_node in recorded_times.items():\n         node_data = _sort_data.get(nodeid, {})\n \n-        node_data[\"setup\"] = max(node_data.get(\"setup\", 0), recorded_node.get(\"setup\", 0))\n+        node_data[\"setup\"] = max(node_data.get(\"setup\", 0), recorded_node.get(\"setup\", -1))\n         node_data[\"call\"] = max(node_data.get(\"call\", 0), recorded_node.get(\"call\", 0))\n         node_data[\"teardown\"] = max(node_data.get(\"teardown\", 0), recorded_node.get(\"teardown\", 0))\n \n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 1.4184134006500244}, {"mutant": {"mutator_name": "Number", "lineno": 38, "col_offset": 54, "end_lineno": 38, "end_col_offset": 55, "text": "-1", "source_folder": "src", "source_file": "src/pytest_sort/database.py", "unified_diff": "--- src/pytest_sort/database.py\n+++ [Mutant] src/pytest_sort/database.py:38\n@@ -35,7 +35,7 @@\n         node_data = _sort_data.get(nodeid, {})\n \n         node_data[\"setup\"] = max(node_data.get(\"setup\", 0), recorded_node.get(\"setup\", 0))\n-        node_data[\"call\"] = max(node_data.get(\"call\", 0), recorded_node.get(\"call\", 0))\n+        node_data[\"call\"] = max(node_data.get(\"call\", -1), recorded_node.get(\"call\", 0))\n         node_data[\"teardown\"] = max(node_data.get(\"teardown\", 0), recorded_node.get(\"teardown\", 0))\n \n         node_data[\"total\"] = node_data[\"setup\"] + node_data[\"call\"] + node_data[\"teardown\"]\n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 0.9074304103851318}, {"mutant": {"mutator_name": "Number", "lineno": 38, "col_offset": 84, "end_lineno": 38, "end_col_offset": 85, "text": "-1", "source_folder": "src", "source_file": "src/pytest_sort/database.py", "unified_diff": "--- src/pytest_sort/database.py\n+++ [Mutant] src/pytest_sort/database.py:38\n@@ -35,7 +35,7 @@\n         node_data = _sort_data.get(nodeid, {})\n \n         node_data[\"setup\"] = max(node_data.get(\"setup\", 0), recorded_node.get(\"setup\", 0))\n-        node_data[\"call\"] = max(node_data.get(\"call\", 0), recorded_node.get(\"call\", 0))\n+        node_data[\"call\"] = max(node_data.get(\"call\", 0), recorded_node.get(\"call\", -1))\n         node_data[\"teardown\"] = max(node_data.get(\"teardown\", 0), recorded_node.get(\"teardown\", 0))\n \n         node_data[\"total\"] = node_data[\"setup\"] + node_data[\"call\"] + node_data[\"teardown\"]\n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 1.4209120273590088}, {"mutant": {"mutator_name": "Number", "lineno": 39, "col_offset": 62, "end_lineno": 39, "end_col_offset": 63, "text": "-1", "source_folder": "src", "source_file": "src/pytest_sort/database.py", "unified_diff": "--- src/pytest_sort/database.py\n+++ [Mutant] src/pytest_sort/database.py:39\n@@ -36,7 +36,7 @@\n \n         node_data[\"setup\"] = max(node_data.get(\"setup\", 0), recorded_node.get(\"setup\", 0))\n         node_data[\"call\"] = max(node_data.get(\"call\", 0), recorded_node.get(\"call\", 0))\n-        node_data[\"teardown\"] = max(node_data.get(\"teardown\", 0), recorded_node.get(\"teardown\", 0))\n+        node_data[\"teardown\"] = max(node_data.get(\"teardown\", -1), recorded_node.get(\"teardown\", 0))\n \n         node_data[\"total\"] = node_data[\"setup\"] + node_data[\"call\"] + node_data[\"teardown\"]\n \n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 1.423919916152954}, {"mutant": {"mutator_name": "Number", "lineno": 39, "col_offset": 96, "end_lineno": 39, "end_col_offset": 97, "text": "-1", "source_folder": "src", "source_file": "src/pytest_sort/database.py", "unified_diff": "--- src/pytest_sort/database.py\n+++ [Mutant] src/pytest_sort/database.py:39\n@@ -36,7 +36,7 @@\n \n         node_data[\"setup\"] = max(node_data.get(\"setup\", 0), recorded_node.get(\"setup\", 0))\n         node_data[\"call\"] = max(node_data.get(\"call\", 0), recorded_node.get(\"call\", 0))\n-        node_data[\"teardown\"] = max(node_data.get(\"teardown\", 0), recorded_node.get(\"teardown\", 0))\n+        node_data[\"teardown\"] = max(node_data.get(\"teardown\", 0), recorded_node.get(\"teardown\", -1))\n \n         node_data[\"total\"] = node_data[\"setup\"] + node_data[\"call\"] + node_data[\"teardown\"]\n \n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 0.9162998199462891}, {"mutant": {"mutator_name": "Decorator", "lineno": 20, "col_offset": 0, "end_lineno": 65, "end_col_offset": 99, "text": "def pytest_addoption(parser: pytest.Parser) -> None:\n    \"\"\"pytest_sort: Add command line and ini options to pytest.\"\"\"\n    group = parser.getgroup('pytest-sort')\n    group.addoption('--sort-mode', action='store', dest='sort_mode', help=str(modes))\n    group.addoption('--sort_mode', action='store', dest='sort_mode', help=argparse.SUPPRESS)\n    parser.addini('sort_mode', help=str(modes))\n    group.addoption('--sort-bucket', action='store', dest='sort_bucket', help=str(bucket_types))\n    group.addoption('--sort_bucket', action='store', dest='sort_bucket', help=argparse.SUPPRESS)\n    parser.addini('sort_bucket', help=str(bucket_types))\n    choices = ['sort_mode']\n    choices.extend(modes)\n    group.addoption('--sort-bucket-mode', action='store', dest='sort_bucket_mode', help=str(choices))\n    group.addoption('--sort_bucket_mode', action='store', dest='sort_bucket_mode', help=argparse.SUPPRESS)\n    parser.addini('sort_bucket_mode', help=str(choices))\n    help_text = 'Random Seed to use with random mode.'\n    group.addoption('--sort-seed', action='store', dest='sort_seed', help=help_text)\n    group.addoption('--sort_seed', action='store', dest='sort_seed', help=argparse.SUPPRESS)\n    parser.addini('sort_seed', help=help_text)\n    help_text = 'Records runtimes. Activated by default when sort-mode=fastest'\n    group.addoption('--sort-record-times', action='store_true', dest='sort_record', help=help_text)\n    group.addoption('--sort_record_times', action='store_true', dest='sort_record', help=argparse.SUPPRESS)\n    group.addoption('--sort-no-record-times', action='store_true', dest='sort_no_record', help=help_text)\n    group.addoption('--sort_no_record_times', action='store_true', dest='sort_no_record', help=argparse.SUPPRESS)\n    parser.addini('sort_record_times', help=help_text, type='bool')\n    help_text = 'Clear the recorded runtimes before sorting.'\n    group.addoption('--sort-reset-times', action='store_true', dest='sort_reset_times', help=help_text)\n    group.addoption('--sort_reset_times', action='store_true', dest='sort_reset_times', help=argparse.SUPPRESS)\n    help_text = 'At end of report current times.'\n    group.addoption('--sort-report-times', action='store_true', dest='sort_report_times', help=help_text)\n    group.addoption('--sort_report_times', action='store_true', dest='sort_report_times', help=argparse.SUPPRESS)\n    help_text = 'Location to store pytest-sort data. (default: ./.pytest_sort)'\n    group.addoption('--sort-datafile', action='store', dest='sort_datafile', help=help_text)\n    group.addoption('--sort_datafile', action='store', dest='sort_datafile', help=argparse.SUPPRESS)\n    parser.addini('sort_datafile', help=help_text)\n    group.addoption('--sort-debug', action='store_true', dest='sort_debug', help=argparse.SUPPRESS)\n    group.addoption('--sort_debug', action='store_true', dest='sort_debug', help=argparse.SUPPRESS)", "source_folder": "src", "source_file": "src/pytest_sort/plugin.py", "unified_diff": "--- src/pytest_sort/plugin.py\n+++ [Mutant] src/pytest_sort/plugin.py:20\n@@ -17,52 +17,42 @@\n     from _pytest.terminal import TerminalReporter\n \n \n-@pytest.hookimpl\n def pytest_addoption(parser: pytest.Parser) -> None:\n     \"\"\"pytest_sort: Add command line and ini options to pytest.\"\"\"\n-    group = parser.getgroup(\"pytest-sort\")\n-\n-    group.addoption(\"--sort-mode\", action=\"store\", dest=\"sort_mode\", help=str(modes))\n-    group.addoption(\"--sort_mode\", action=\"store\", dest=\"sort_mode\", help=argparse.SUPPRESS)\n-    parser.addini(\"sort_mode\", help=str(modes))\n-\n-    group.addoption(\"--sort-bucket\", action=\"store\", dest=\"sort_bucket\", help=str(bucket_types))\n-    group.addoption(\"--sort_bucket\", action=\"store\", dest=\"sort_bucket\", help=argparse.SUPPRESS)\n-    parser.addini(\"sort_bucket\", help=str(bucket_types))\n-\n-    choices = [\"sort_mode\"]\n+    group = parser.getgroup('pytest-sort')\n+    group.addoption('--sort-mode', action='store', dest='sort_mode', help=str(modes))\n+    group.addoption('--sort_mode', action='store', dest='sort_mode', help=argparse.SUPPRESS)\n+    parser.addini('sort_mode', help=str(modes))\n+    group.addoption('--sort-bucket', action='store', dest='sort_bucket', help=str(bucket_types))\n+    group.addoption('--sort_bucket', action='store', dest='sort_bucket', help=argparse.SUPPRESS)\n+    parser.addini('sort_bucket', help=str(bucket_types))\n+    choices = ['sort_mode']\n     choices.extend(modes)\n-    group.addoption(\"--sort-bucket-mode\", action=\"store\", dest=\"sort_bucket_mode\", help=str(choices))\n-    group.addoption(\"--sort_bucket_mode\", action=\"store\", dest=\"sort_bucket_mode\", help=argparse.SUPPRESS)\n-    parser.addini(\"sort_bucket_mode\", help=str(choices))\n-\n-    help_text = \"Random Seed to use with random mode.\"\n-    group.addoption(\"--sort-seed\", action=\"store\", dest=\"sort_seed\", help=help_text)\n-    group.addoption(\"--sort_seed\", action=\"store\", dest=\"sort_seed\", help=argparse.SUPPRESS)\n-    parser.addini(\"sort_seed\", help=help_text)\n-\n-    help_text = \"Records runtimes. Activated by default when sort-mode=fastest\"\n-    group.addoption(\"--sort-record-times\", action=\"store_true\", dest=\"sort_record\", help=help_text)\n-    group.addoption(\"--sort_record_times\", action=\"store_true\", dest=\"sort_record\", help=argparse.SUPPRESS)\n-    group.addoption(\"--sort-no-record-times\", action=\"store_true\", dest=\"sort_no_record\", help=help_text)\n-    group.addoption(\"--sort_no_record_times\", action=\"store_true\", dest=\"sort_no_record\", help=argparse.SUPPRESS)\n-    parser.addini(\"sort_record_times\", help=help_text, type=\"bool\")\n-\n-    help_text = \"Clear the recorded runtimes before sorting.\"\n-    group.addoption(\"--sort-reset-times\", action=\"store_true\", dest=\"sort_reset_times\", help=help_text)\n-    group.addoption(\"--sort_reset_times\", action=\"store_true\", dest=\"sort_reset_times\", help=argparse.SUPPRESS)\n-\n-    help_text = \"At end of report current times.\"\n-    group.addoption(\"--sort-report-times\", action=\"store_true\", dest=\"sort_report_times\", help=help_text)\n-    group.addoption(\"--sort_report_times\", action=\"store_true\", dest=\"sort_report_times\", help=argparse.SUPPRESS)\n-\n-    help_text = \"Location to store pytest-sort data. (default: ./.pytest_sort)\"\n-    group.addoption(\"--sort-datafile\", action=\"store\", dest=\"sort_datafile\", help=help_text)\n-    group.addoption(\"--sort_datafile\", action=\"store\", dest=\"sort_datafile\", help=argparse.SUPPRESS)\n-    parser.addini(\"sort_datafile\", help=help_text)\n-\n-    group.addoption(\"--sort-debug\", action=\"store_true\", dest=\"sort_debug\", help=argparse.SUPPRESS)\n-    group.addoption(\"--sort_debug\", action=\"store_true\", dest=\"sort_debug\", help=argparse.SUPPRESS)\n+    group.addoption('--sort-bucket-mode', action='store', dest='sort_bucket_mode', help=str(choices))\n+    group.addoption('--sort_bucket_mode', action='store', dest='sort_bucket_mode', help=argparse.SUPPRESS)\n+    parser.addini('sort_bucket_mode', help=str(choices))\n+    help_text = 'Random Seed to use with random mode.'\n+    group.addoption('--sort-seed', action='store', dest='sort_seed', help=help_text)\n+    group.addoption('--sort_seed', action='store', dest='sort_seed', help=argparse.SUPPRESS)\n+    parser.addini('sort_seed', help=help_text)\n+    help_text = 'Records runtimes. Activated by default when sort-mode=fastest'\n+    group.addoption('--sort-record-times', action='store_true', dest='sort_record', help=help_text)\n+    group.addoption('--sort_record_times', action='store_true', dest='sort_record', help=argparse.SUPPRESS)\n+    group.addoption('--sort-no-record-times', action='store_true', dest='sort_no_record', help=help_text)\n+    group.addoption('--sort_no_record_times', action='store_true', dest='sort_no_record', help=argparse.SUPPRESS)\n+    parser.addini('sort_record_times', help=help_text, type='bool')\n+    help_text = 'Clear the recorded runtimes before sorting.'\n+    group.addoption('--sort-reset-times', action='store_true', dest='sort_reset_times', help=help_text)\n+    group.addoption('--sort_reset_times', action='store_true', dest='sort_reset_times', help=argparse.SUPPRESS)\n+    help_text = 'At end of report current times.'\n+    group.addoption('--sort-report-times', action='store_true', dest='sort_report_times', help=help_text)\n+    group.addoption('--sort_report_times', action='store_true', dest='sort_report_times', help=argparse.SUPPRESS)\n+    help_text = 'Location to store pytest-sort data. (default: ./.pytest_sort)'\n+    group.addoption('--sort-datafile', action='store', dest='sort_datafile', help=help_text)\n+    group.addoption('--sort_datafile', action='store', dest='sort_datafile', help=argparse.SUPPRESS)\n+    parser.addini('sort_datafile', help=help_text)\n+    group.addoption('--sort-debug', action='store_true', dest='sort_debug', help=argparse.SUPPRESS)\n+    group.addoption('--sort_debug', action='store_true', dest='sort_debug', help=argparse.SUPPRESS)\n \n \n @pytest.hookimpl\n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 1.4225409030914307}, {"mutant": {"mutator_name": "Decorator", "lineno": 68, "col_offset": 0, "end_lineno": 80, "end_col_offset": 34, "text": "def pytest_configure(config: pytest.Config) -> None:\n    \"\"\"pytest_sort: Add markers to pytest.\"\"\"\n    config.addinivalue_line('markers', 'sort(mode,bucket): Override pytest-sort Options.')\n    config.addinivalue_line('markers', 'order(item_sort_key): Always use specified Sort Key for this test item or bucket.')\n    SortConfig.from_pytest(config)", "source_folder": "src", "source_file": "src/pytest_sort/plugin.py", "unified_diff": "--- src/pytest_sort/plugin.py\n+++ [Mutant] src/pytest_sort/plugin.py:68\n@@ -65,18 +65,10 @@\n     group.addoption(\"--sort_debug\", action=\"store_true\", dest=\"sort_debug\", help=argparse.SUPPRESS)\n \n \n-@pytest.hookimpl\n def pytest_configure(config: pytest.Config) -> None:\n     \"\"\"pytest_sort: Add markers to pytest.\"\"\"\n-    config.addinivalue_line(\n-        \"markers\",\n-        \"sort(mode,bucket): Override pytest-sort Options.\",\n-    )\n-\n-    config.addinivalue_line(\n-        \"markers\",\n-        \"order(item_sort_key): Always use specified Sort Key for this test item or bucket.\",\n-    )\n+    config.addinivalue_line('markers', 'sort(mode,bucket): Override pytest-sort Options.')\n+    config.addinivalue_line('markers', 'order(item_sort_key): Always use specified Sort Key for this test item or bucket.')\n     SortConfig.from_pytest(config)\n \n \n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 0.9070620536804199}, {"mutant": {"mutator_name": "Decorator", "lineno": 83, "col_offset": 0, "end_lineno": 91, "end_col_offset": 17, "text": "def pytest_report_header(config: pytest.Config) -> str:\n    \"\"\"pytest_sort: Build Header for pytest to display.\"\"\"\n    header = 'pytest-sort:'\n    for key, value in SortConfig.header_dict().items():\n        header += f'\\n  {key}: {value}'\n    return header", "source_folder": "src", "source_file": "src/pytest_sort/plugin.py", "unified_diff": "--- src/pytest_sort/plugin.py\n+++ [Mutant] src/pytest_sort/plugin.py:83\n@@ -80,14 +80,11 @@\n     SortConfig.from_pytest(config)\n \n \n-@pytest.hookimpl\n-def pytest_report_header(config: pytest.Config) -> str:  # noqa: ARG001\n+def pytest_report_header(config: pytest.Config) -> str:\n     \"\"\"pytest_sort: Build Header for pytest to display.\"\"\"\n-    header = \"pytest-sort:\"\n-\n+    header = 'pytest-sort:'\n     for key, value in SortConfig.header_dict().items():\n-        header += f\"\\n  {key}: {value}\"\n-\n+        header += f'\\n  {key}: {value}'\n     return header\n \n \n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 1.42409348487854}, {"mutant": {"mutator_name": "Decorator", "lineno": 94, "col_offset": 0, "end_lineno": 104, "end_col_offset": 21, "text": "def pytest_collection_modifyitems(session: pytest.Session, config: pytest.Config, items: list[pytest.Item]) -> None:\n    \"\"\"pytest_sort: Modify item order.\"\"\"\n    if SortConfig.reset:\n        clear_db()\n    sort_items(items)", "source_folder": "src", "source_file": "src/pytest_sort/plugin.py", "unified_diff": "--- src/pytest_sort/plugin.py\n+++ [Mutant] src/pytest_sort/plugin.py:94\n@@ -91,16 +91,10 @@\n     return header\n \n \n-@pytest.hookimpl\n-def pytest_collection_modifyitems(\n-    session: pytest.Session,  # noqa: ARG001\n-    config: pytest.Config,  # noqa: ARG001\n-    items: list[pytest.Item],\n-) -> None:\n+def pytest_collection_modifyitems(session: pytest.Session, config: pytest.Config, items: list[pytest.Item]) -> None:\n     \"\"\"pytest_sort: Modify item order.\"\"\"\n     if SortConfig.reset:\n         clear_db()\n-\n     sort_items(items)\n \n \n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 0.9050991535186768}, {"mutant": {"mutator_name": "Decorator", "lineno": 121, "col_offset": 0, "end_lineno": 132, "end_col_offset": 53, "text": "def pytest_terminal_summary(terminalreporter: TerminalReporter, exitstatus: int, config: pytest.Config) -> None:\n    \"\"\"pytest_sort: Store recorded runtimes in database.\"\"\"\n    if SortConfig.recorded_times:\n        update_test_cases(SortConfig.recorded_times)\n    if SortConfig.report:\n        print_recorded_times_report(terminalreporter)", "source_folder": "src", "source_file": "src/pytest_sort/plugin.py", "unified_diff": "--- src/pytest_sort/plugin.py\n+++ [Mutant] src/pytest_sort/plugin.py:121\n@@ -118,15 +118,9 @@\n     yield\n \n \n-@pytest.hookimpl\n-def pytest_terminal_summary(\n-    terminalreporter: TerminalReporter,\n-    exitstatus: int,  # noqa: ARG001\n-    config: pytest.Config,  # noqa: ARG001\n-) -> None:\n+def pytest_terminal_summary(terminalreporter: TerminalReporter, exitstatus: int, config: pytest.Config) -> None:\n     \"\"\"pytest_sort: Store recorded runtimes in database.\"\"\"\n     if SortConfig.recorded_times:\n         update_test_cases(SortConfig.recorded_times)\n-\n     if SortConfig.report:\n         print_recorded_times_report(terminalreporter)\n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 0.980149507522583}], "summary": {"trials": 703, "tested": 703, "found": 691, "not_found": 12, "timeout": 0, "errors": 0, "success_rate": 0.9829302987197724, "coverage_display": "98.2%"}}
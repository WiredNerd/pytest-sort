[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "pytest-sort"
description = "Tools for sorting test cases"
version = "1.1.0"
license = { file = "LICENSE" }
keywords = [
    "test",
    "pytest",
    "order",
    "pytest-order",
    "sort",
    "random",
    "pytest-random",
    "pytest-random-order",
    "randomly",
    "pytest-randomly",
]
authors = [{ name = "WiredNerd", email = "pbuschmail-pytestsort@yahoo.com" }]
maintainers = [
    { name = "WiredNerd", email = "pbuschmail-pytestsort@yahoo.com" },
]
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Framework :: Pytest",
]
dependencies = ["pytest>=7.0.0"]

[project.urls]
"Homepage" = "https://github.com/WiredNerd/pytest-sort"
"Bug Tracker" = "https://github.com/WiredNerd/pytest-sort/issues"

[project.entry-points."pytest11"]
sort = "pytest_sort.plugin"

[tool.pytest.ini_options]
pythonpath = ["src", "src_mut"]
testpaths = ["test", "test_mut"]
addopts = "-vv --cov-reset --cov-report=html:reports/coverage --cov-report=term --cov-report=json:code-coverage.json"

# https://pytest-cov.readthedocs.io/en/latest/config.html
# https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch = true

[tool.coverage.report]
# fail_under = 95
skip_empty = true
exclude_also = ["import .*", "from .* import .*", "if TYPE_CHECKING:"]

[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311']
skip-string-normalization = true
color = true

[tool.isort]
profile = 'black'

[tool.mypy]
files = "src"

[tool.ruff]
target-version = "py38"
show-source = true
select = ["ALL"]
ignore = [
    "D203",   # 1 blank line required before class docstring
    "D213",   # multi-line-summary-second-line
    "EM101",  # Exception must not use a string literal, assign to variable first
    "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
    "TRY003", # Avoid specifying long messages outside the exception class
]
line-length = 120
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".pants.d",
    ".ruff_cache",
    ".venv",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "venv",
]
[tool.ruff.per-file-ignores]
"src/pytest_sort/core.py" = [
    "ARG005", # Unused lambda argument
    "T201",   # print found
]
"src/pytest_sort/database.py" = [
    "PLW0603", # global-statement
]
